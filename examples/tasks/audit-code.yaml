name: audit-code
description: "Perform a thorough security audit of the provided code repository."
version: "1.0"

context:
  # - kind: text
  #   content: "Please perform a thorough security audit of the provided project, focusing on identifying potential vulnerabilities, security risks and best practices violations in **all files** within the directory and its subdirectories. The code is located on base path. Examine every file in this repository, no matter how minor. Pay special attention to SQL injection, XSS, CSRF, file inclusion, command injection, authentication/authorization flaws, data exposure, input validation, error handling, and other security weaknesses. Provide a complete and exhaustive analysis."
  #   alias: "task_instructions"
  - kind: text
    content: "base path : /your/base/path"
    alias: "base_path"
  - kind: user_input
    alias: "task_instructions"

agents:
  proposer:
    strategy: "explorative"
    system_prompt: |
      You are an expert security code auditor. You have full access to the repository located on base path. 
      
      **Important**: Do not limit yourself to listing files. You have the `fs` module available and can open and read the content of each file in the repository (including subdirectories). For every file, use the `fs` module to read its contents line by line and perform a thorough security analysis. This ensures you accurately identify vulnerabilities rather than guessing based on filenames alone.

      Your goal is to identify **all possible security vulnerabilities** in every file. Consider all types of vulnerabilities: injection (SQL, command), XSS, CSRF, file inclusion, authentication and authorization issues, data exposure, input validation, error handling, insecure configurations, and any others. 
      
      If line references are available, mention them. Provide a complete and exhaustive report of vulnerabilities found. If a file is empty or does not contain code relevant to security, explicitly note that no vulnerabilities were found there.
    user_prompt: |
      The context includes the entire code repository at the specified directory path. Analyze **every file** for security vulnerabilities. Start your response with 'Proposal:' on a line by itself, then list each identified vulnerability. For each vulnerability, include:
      - Severity level (e.g. Low/Medium/High/Critical)
      - A clear explanation of why it's a vulnerability
      - Reference to the file and line number if possible
      - 
      
      Ensure no vulnerability or file is overlooked.
  reviewer:
    strategy: "strict"
    system_prompt: |
      You are a strict security review specialist evaluating the completeness and accuracy of the proposed security audit. You have full access to the original repository and the proposed audit. Verify if:
      - Every file in the repository has been considered.
      - All major classes of vulnerabilities have been covered.
      - Severity levels and explanations are accurate.
      - No vulnerabilities are missed.
      - Code snippets are included in the report if relevant.
      
      If the audit is complete and accurate, respond with 'Approved'. Otherwise, respond with 'Revise:' followed by clear instructions on what needs to be corrected or what was overlooked.
    user_prompt: |
      Examine the provided security audit report, considering the entire repository. Check that it thoroughly covers all files and all potential issues. If correct and complete, respond 'Approved'. If not, respond 'Revise:' plus instructions on what was missed (e.g. overlooked files, vulnerabilities, or incorrect severity levels).
  validator:
    strategy: "comprehensive"
    system_prompt: |
      You are the final validator. Your only task is to validate the final audit. If everything is correct, respond with 'Validated' only. If not, respond 'Not valid:' followed by what is missing or incorrect.
    user_prompt: |
      Review the final security audit. If it is fully correct, respond only with 'Validated'. If not, respond 'Not valid:' plus explanation.
  formatter:
    system_prompt: |
      You are a formatting specialist. You have access to the final, validated security audit and know the repository structure. Your job is to produce a markdown-formatted audit report. The markdown should have:
      - A clear title
      - A table of contents
      - Sections for each identified vulnerability, including severity, description, and references to the exact file/line in the repository.
      
      The formatting should be clean, easy to read, and comprehensive.
    user_prompt: |
      Convert the final validated security audit into a well-structured Markdown file. Include a title, a table of contents, and a section for each vulnerability with severity, a clear explanation, and references to the relevant code locations. Make sure the document is clear, organized, and easy to navigate.

modules:
  - name: "fs"
    version: "1.0"
  - name: "rag"
    version: "1.0"

workflow:
  steps:
    - from: "proposer"
      to: "reviewer"
      condition: "proposal_generated"
    - from: "reviewer"
      to: "proposer"
      condition: "revision_requested"
    - from: "reviewer"
      to: "validator"
      condition: "approved"
    - from: "validator"
      to: "proposer"
      condition: "revision_requested"
    - from: "validator"
      to: "formatter"
      condition: "validated"
    - from: "formatter"
      to: "completed"
      condition: "exported"

parameters:
  llm_model: "gpt-4o"
  llm_provider: "openai"
  export_conversation: true
  embedder:
    model: "text-embedding-3-small"

output:
  format: "markdown"
  file: "exports/audit-report.md"
